#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

// #include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

&sk {
    quick-release;
    release-after-ms = <1000>;
};

&sl { release-after-ms = <1000>; };

&lt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <50>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        swap_win: swapper_win {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            ignored-key-positions = <4 16 19 20 21 22>;
        };

        swap_tab: swapper_tab {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_TAB";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;

            ignored-key-positions = <4 16 19 20 21 22>;
        };

        lt_sym: lt_sym {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SYM";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&m_layer_sym>, <&kp>;
        };

        lt_num: lt_num {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_NUM";
            bindings = <&m_mo_num>, <&m_tog_num>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };

        lt_num_ru: lt_num_ru {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_NUM_RU";
            bindings = <&m_mo_num_ru>, <&m_tog_num_ru>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };

        lt_esc: lt_esc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_ESC";
            bindings = <&mo>, <&m_esc>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };

        tp_warpd_hint: tp_warpd_hint {
            compatible = "zmk,behavior-hold-tap";
            label = "TP_WARPD_HINT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&m_warpd_hint>, <&kp>;
        };
    };

    macros {
        m_en: m_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS>;
            label = "M_EN";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_ru: m_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(CAPS)>;
            label = "M_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_to_en: macro_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &m_en>;
            label = "MACRO_EN";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_to_ru: macro_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &m_ru>;
            label = "MACRO_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_kp_en: kp_en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&m_en &macro_param_1to1 &kp MACRO_PLACEHOLDER &m_ru>;
            label = "KP_EN";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_comma: m_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "M_COMMA";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_comma_ru: m_comma_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SLASH) &kp SPACE>;
            label = "M_COMMA_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_dot: m_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
            label = "M_DOT";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_dot_ru: m_dot_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SLASH &kp SPACE &sk LSHFT>;
            label = "M_DOT_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_layer_sym: m_layer_sym {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&m_en>,
                <&macro_press>,
                <&mo 0 &mo 8>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 8 &mo 0>,
                <&macro_tap>,
                <&m_ru>;

            label = "M_LAYER_SYM";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_layer_cmd: macro_layer_cmd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&m_en>,
                <&macro_press>,
                <&mo 0 &mo 4>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 4 &mo 0>,
                <&macro_tap>,
                <&m_ru>;

            label = "MACRO_LAYER_CMD";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_warpd_hint: macro_warpd_hint {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F17 &tog 10>;
            label = "MACRO_WARPD_HINT";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_warpd_esc: macro_warpd_esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &tog 10>;
            label = "MACRO_WARPD_ESC";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_warpd_click: macro_warpd_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &mkp LCLK &tog 10>;
            label = "MACRO_WARPD_CLICK";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_warpd_normal: macro_warpd_normal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F18 &tog 10>;
            label = "MACRO_WARPD_NORMAL";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_zed_1: macro_zed_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F3 &kp LA(UP) &kp DOWN>;
            label = "MACRO_ZED_1";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_caps_word: macro_caps_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHFT &caps_word>;
            label = "MACRO_CAPS_WORD";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_fn: macro_fn {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog 9 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "MACRO_FN";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_tog_num: tog_multi {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog 6 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TOG_MULTI";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_tog_num_ru: tog_multi_ru {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog 7 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TOG_MULTI_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_mo_num: mo_multi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog 6>,
                <&macro_press>,
                <&mo 2>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>;

            label = "MO_MULTI";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_mo_num_ru: mo_multi_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog 7>,
                <&macro_press>,
                <&mo 3>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 3>;

            label = "MO_MULTI_RU";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        m_esc: m_esc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp ESC>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp ESC &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>;

            label = "M_ESC";
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp LBKT>;
            key-positions = <6 7>;
        };

        hrdsgn {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <>;
        };

        combo_ret {
            bindings = <&kp RET>;
            key-positions = <>;
        };

        combo_bs {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };

        combo_spc {
            bindings = <&kp SPACE>;
            key-positions = <>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <21 9>;
        };

        combo_mouse_l {
            bindings = <&tog 14>;
            key-positions = <>;
            layers = <2 3 0 1>;
        };

        combo_mouse_r {
            bindings = <&tog 14>;
            key-positions = <>;
            layers = <2 3 0 1>;
        };

        combo_bootloader_l {
            bindings = <&bootloader>;
            key-positions = <0 12>;
        };

        combo_bootloader_r {
            bindings = <&bootloader>;
            key-positions = <11 23>;
        };

        fn {
            bindings = <&mo 9>;
            key-positions = <37 38>;
            layers = <0 1>;
            timeout-ms = <150>;
            require-prior-idle-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  LWR/'   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&kp Q  &kp W  &kp E  &kp R        &kp T          &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F        &kp G          &kp H        &kp J  &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V        &kp B          &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH
                     &mo 9  &lt 2 SPACE  &lt_esc 6 0    &lt 8 ENTER  &sl 4  &kp RSHFT
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
